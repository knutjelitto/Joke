primitive f32 is Floating<f32>

    new widen(that: i8): f32 => compile_intrinsic
    new widen(that: i16): f32 => compile_intrinsic
    new widen(that: u8): f32 => compile_intrinsic
    new widen(that: u16): f32 => compile_intrinsic

    fun add(that: f32): f32 => compile_intrinsic
    fun sub(that: f32): f32 => compile_intrinsic
    fun mul(that: f32): f32 => compile_intrinsic
    fun div(that: f32): f32 => compile_intrinsic
    fun rem(that: f32): f32 => compile_intrinsic
    fun neg(): f32 => compile_intrinsic


primitive f64 is Floating<f64>

    new widen(that: i8): f64 => compile_intrinsic
    new widen(that: i16): f64 => compile_intrinsic
    new widen(that: i32): f64 => compile_intrinsic
    new widen(that: u8): f64 => compile_intrinsic
    new widen(that: u16): f64 => compile_intrinsic
    new widen(that: u32): f64 => compile_intrinsic
    new widen(that: f32): f64 => compile_intrinsic

    fun add(that: f64): f64 => compile_intrinsic
    fun sub(that: f64): f64 => compile_intrinsic
    fun mul(that: f64): f64 => compile_intrinsic
    fun div(that: f64): f64 => compile_intrinsic
    fun rem(that: f64): f64 => compile_intrinsic
    fun neg(): f64 => compile_intrinsic
