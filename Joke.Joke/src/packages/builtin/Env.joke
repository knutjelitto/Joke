"""
An environment holds the command line and other values injected into the
program by default by the runtime.
"""
class Env
    """
    The root capability.

    Can be `none` for artificially constructed `Env` instances.
    """
    let root: (AmbientAuth | none)

  
    """
    Stdin represented as an actor.
    """
    let input: InputStream


    """Stdout"""
    let out: OutStream


    """Stderr"""
    let err: OutStream

  
    """The command line used to start the program."""
    let args: Array<string>

  
    """The program's environment variables."""
    let vars: Array<string>

  
    """
    Sets the environment's exit code. The exit code of the root environment will
    be the exit code of the application, which defaults to 0.
    """
    let exitcode: {(int)}

  
    """
    Builds an environment from the command line. This is done before the Main
    actor is created.
    """
    new _create(argc: U32, argv: Pointer<Pointer<U8>>, envp: Pointer<Pointer<U8>>) =>
    
        root = AmbientAuth._create()
        C.pony_os_stdout_setup()

        input = Stdin._create(C.pony_os_stdin_setup())
        out = StdStream._out()
        err = StdStream._err()
    
        args = _strings_from_pointers(argv, argc.usize())
        vars = _strings_from_pointers(envp, _count_strings(envp))

        exitcode = {(code: I32) => C.pony_exitcode(code) }

  
    """
    Build an artificial environment. A root capability may be supplied.
    """
    new create(
        root': (AmbientAuth | None),
        input': InputStream, 
        out': OutStream,
        err': OutStream,
        args': Array<string>,
        vars': Array<string>,
        exitcode': {(int)})
    =>
        root = root'
        input = input'
        out = out'
        err = err'
        args = args'
        vars = vars'
        exitcode = exitcode'

  
    fun _count_strings(data: Pointer<Pointer<U8>>): USize =>
        if data.is_null() then
            return 0
        end

        var i: USize = 0

        while
            let entry = data._apply(i)
            not entry.is_null()
        do
            i = i + 1
        end
        i

  
    fun _strings_from_pointers(data: Pointer<Pointer<U8>>, len: USize) : Array<string> =>
        let array = Array<string>(len)
        var i: USize = 0

        while i < len do
            let entry = data._apply(i = i + 1)
            array.push(String.copy_cstring(entry))
        end

        array
