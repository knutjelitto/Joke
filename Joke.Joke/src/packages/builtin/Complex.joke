struct complex<F: Floating<F>> is Number<complex>

    let re: F
    let im: F

    new create(re': F, im': F) =>
        re = re'
        im = im'


    new widen(that: F) =>
        create(that, 0)


    fun op_add(that: complex<F>): complex<F> =>
        complex(this.re + that.re, this.im + that.im)


    fun op_sub(that: complex<F>): complex<F> =>
        complex(this.re + that.re, this.im + that.im)


    fun op_mul(that: complex<F>): complex<F> =>
        complex((this.re * that.re) - (this.im * that.im), (this.re * that.im) + (this.im * that.re))


    fun op_div(that: complex<F>): complex<F> =>
        let sqr = (that.re * that.re) + (that.im * that.im)
        complex(
            ((this.re * that.re) + (this.im * that.im)) / sqr,
            ((this.im * that.re) - (this.re * that.im)) / sqr)


type complex32 is complex<f32>
type complex64 is complex<f64>

type complex is complex64
