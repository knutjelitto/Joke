"""
8 bit unsigned integer.
"""
primitive u8 is Integral<u8>

    fun op_add(that: u8): u8 => compile_intrinsic
    fun op_sub(that: u8): u8 => compile_intrinsic
    fun op_mul(that: u8): u8 => compile_intrinsic
    fun op_div(that: u8): u8 => compile_intrinsic
    fun op_rem(that: u8): u8 => compile_intrinsic
    fun op_not(): u8 => compile_intrinsic


"""
16 bit unsigned integer.
"""
primitive u16 is Integral<u16>

    new widen(that: u8): u16 => compile_intrinsic

    fun op_add(that: u16): u16 => compile_intrinsic
    fun op_sub(that: u16): u16 => compile_intrinsic
    fun op_mul(that: u16): u16 => compile_intrinsic
    fun op_div(that: u16): u16 => compile_intrinsic
    fun op_rem(that: u16): u16 => compile_intrinsic
    fun op_not(): u16 => compile_intrinsic


"""
32 bit unsigned integer.
"""
primitive u32 is Integral<u32>

    new widen(that: u8): u32 => compile_intrinsic
    new widen(that: u16): u32 => compile_intrinsic

    fun op_add(that: u32): u32 => compile_intrinsic
    fun op_sub(that: u32): u32 => compile_intrinsic
    fun op_mul(that: u32): u32 => compile_intrinsic
    fun op_div(that: u32): u32 => compile_intrinsic
    fun op_rem(that: u32): u32 => compile_intrinsic
    fun op_not(): u32 => compile_intrinsic


"""
64 bit unsigned integer.
"""
primitive u64 is Integral<u64>

    new widen(that: u8): u64 => compile_intrinsic
    new widen(that: u16): u64 => compile_intrinsic
    new widen(that: u32): u64 => compile_intrinsic

    fun op_add(that: u64): u64 => compile_intrinsic
    fun op_sub(that: u64): u64 => compile_intrinsic
    fun op_mul(that: u64): u64 => compile_intrinsic
    fun op_div(that: u64): u64 => compile_intrinsic
    fun op_rem(that: u64): u64 => compile_intrinsic
    fun op_not(): u64 => compile_intrinsic


"""
8 bit signed integer.
"""
primitive i8 is Integral<i8>

    fun op_add(that: i8): i8 => compile_intrinsic
    fun op_sub(that: i8): i8 => compile_intrinsic
    fun op_mul(that: i8): i8 => compile_intrinsic
    fun op_div(that: i8): i8 => compile_intrinsic
    fun op_rem(that: i8): i8 => compile_intrinsic
    fun op_not(): i8 => compile_intrinsic
    fun op_neg(): i8 => compile_intrinsic


"""
16 bit signed integer.
"""
primitive i16 is Integral<i16>

    new widen(that: i8): i16 => compile_intrinsic
    new widen(that: u8): i16 => compile_intrinsic

    fun op_add(that: i16): i16 => compile_intrinsic
    fun op_sub(that: i16): i16 => compile_intrinsic
    fun op_mul(that: i16): i16 => compile_intrinsic
    fun op_div(that: i16): i16 => compile_intrinsic
    fun op_rem(that: i16): i16 => compile_intrinsic
    fun op_not(): i16 => compile_intrinsic
    fun op_neg(): i16 => compile_intrinsic


"""
32 bit signed integer.
"""
primitive i32 is Integral<i32>

    new widen(that: i8): i32 => compile_intrinsic
    new widen(that: i16): i32 => compile_intrinsic
    new widen(that: u8): i32 => compile_intrinsic
    new widen(that: u16): i32 => compile_intrinsic

    fun op_add(that: i32): i32 => compile_intrinsic
    fun op_sub(that: i32): i32 => compile_intrinsic
    fun op_mul(that: i32): i32 => compile_intrinsic
    fun op_div(that: i32): i32 => compile_intrinsic
    fun op_rem(that: i32): i32 => compile_intrinsic
    fun op_not(): i32 => compile_intrinsic
    fun op_neg(): i32 => compile_intrinsic


"""
64 bit signed integer.
"""
primitive i64 is Integral<i64>

    new widen(that: i8): i64 => compile_intrinsic
    new widen(that: i16): i64 => compile_intrinsic
    new widen(that: i32): i64 => compile_intrinsic
    new widen(that: u8): i64 => compile_intrinsic
    new widen(that: u16): i64 => compile_intrinsic
    new widen(that: u32): i64 => compile_intrinsic

    fun op_add(that: i64): i64 => compile_intrinsic
    fun op_sub(that: i64): i64 => compile_intrinsic
    fun op_mul(that: i64): i64 => compile_intrinsic
    fun op_div(that: i64): i64 => compile_intrinsic
    fun op_rem(that: i64): i64 => compile_intrinsic
    fun op_not(): i64 => compile_intrinsic
    fun op_neg(): i64 => compile_intrinsic
