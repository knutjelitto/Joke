"""
Notification for data arriving via an input stream.
"""
interface InputNotify
    
    """
    Called when data is available on the stream.
    """
    fun ref apply(data: Array<u8> iso) => none

    """
    Called when no more data will arrive on the stream.
    """
    fun ref dispose() => none

"""
Asynchronous access to some input stream.
"""
interface tag InputStream
    
    """
    Set the notifier. Optionally, also sets the chunk size, dictating the
    maximum number of bytes of each chunk that will be passed to the notifier.
    """
    be apply(notify: (InputNotify iso | None), chunk_size: USize = 32)

    """
    Clear the notifier in order to shut down input.
    """
    be dispose() => none


"""
Asynchronous access to stdin. The constructor is private to ensure that
access is provided only via an environment.

Reading from stdin is done by registering an `InputNotify`:

```pony
actor Main
new create(env: Env) =>
    // do not forget to call `env.input.dispose` at some point
    env.input(
    object iso is InputNotify
        fun ref apply(data: Array[U8] iso) =>
        env.out.write(String.from_iso_array(consume data))

        fun ref dispose() =>
        env.out.print("Done.")
    end,
    512)
```

**Note:** For reading user input from a terminal, use the [term](term--index.md) package.
"""
actor Stdin
    var _notify: (InputNotify | none) = none
    var _chunk_size: USize = 32
    var _event: AsioEventID = AsioEvent.none()
    let _use_event: bool

  
    """
    Create an asynchronous stdin provider.
    """
    new _create(use_event: Bool) =>
        _use_event = use_event

  
    """
    Set the notifier. Optionally, also sets the chunk size, dictating the
    maximum number of bytes of each chunk that will be passed to the notifier.
    """
    be apply(notify: (InputNotify iso | none), chunk_size: USize = 32) =>
        _set_notify(consume notify)
        _chunk_size = chunk_size

  
    """
    Clear the notifier in order to shut down input.
    """
    be dispose() =>
    _set_notify(none)

  
    """
    Set the notifier.
    """
    fun ref _set_notify(notify: (InputNotify iso | none)) =>
        if notify is None then
            if _use_event and not _event.is_null() then
                // Unsubscribe the event.
                C.pony_asio_event_unsubscribe(_event)
                _event = AsioEvent.none()
            end
        elseif _notify is None then
            if _use_event then
                // Create a new event.
                _event = C.pony_asio_event_create(this, 0, AsioEvent.read(), 0, true)
            else
                // Start the read loop.
                _loop_read()
            end
        end

        try (_notify as InputNotify).dispose() end
        _notify = consume notify

  
    """
    If we are able to read from stdin, schedule another read.
    """
    be _loop_read() =>
        if _read() then
            _loop_read()
        end

  
    """
    When the event fires, read from stdin.
    """
    be _event_notify(event: AsioEventID, flags: u32, arg: u32) =>
        if AsioEvent.disposable(flags) then
            C.pony_asio_event_destroy(event)
        elseif (_event is event) and AsioEvent.readable(flags) then
            _read()
        end

  
    """
    Resume reading.
    """
    be _read_again() =>
        _read()

  
    """
    Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send
    ourself a resume message and stop reading to avoid starving other actors.
    """
    fun ref _read(): Bool =>
        try
            let notify = _notify as InputNotify
            var sum: USize = 0

            while true do
                let chunk_size = _chunk_size
                var data = recover Array<u8> .> undefined(chunk_size) end
                var again: bool = false

                let len = C.pony_os_stdin_read(data.cpointer(), data.size(), addressof again)

                match len
                | -1 =>
                    // Error, possibly would block. Try again.
                    return true
                | 0 =>
                    // EOF. Close everything, stop reading.
                    _close_event()
                    notify.dispose()
                    _notify = None
                    return false
                end

                data.truncate(len)
                notify(consume data)

                if not again then
                    // Not allowed to call pony_os_stdin_read again yet, exit loop.
                    return true
                end

                sum = sum + len

                if sum > (1 << 12) then
                    if _use_event then
                        _read_again()
                    end

                    break
                end
            end
            
            true
        else
            // No notifier. Stop reading.
            _close_event()
            false
        end

    
    """
    Close the event.
    """
    fun ref _close_event() =>
        if not _event.is_null() then
            @pony_asio_event_unsubscribe(_event)
            _event = AsioEvent.none()
        end
